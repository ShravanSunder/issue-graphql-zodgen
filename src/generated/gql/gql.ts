/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

const documents = {
  "fragment CollectModuleFields on CollectModule {\n  ... on FreeCollectModuleSettings {\n    type\n    contractAddress\n    followerOnly\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}":
    types.CollectModuleFieldsFragmentDoc,
  "fragment CommentFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      hasCollectedByMe\n      collectedBy {\n        address\n        defaultProfile {\n          handle\n        }\n      }\n      collectModule {\n        ...CollectModuleFields\n      }\n      metadata {\n        ...MetadataFields\n      }\n      stats {\n        ...StatsFields\n      }\n      mainPost {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      hidden\n      createdAt\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}":
    types.CommentFieldsFragmentDoc,
  "fragment MetadataFields on MetadataOutput {\n  name\n  description\n  content\n  image\n  attributes {\n    traitType\n    value\n  }\n  cover {\n    original {\n      url\n    }\n  }\n  media {\n    original {\n      url\n      mimeType\n    }\n  }\n}":
    types.MetadataFieldsFragmentDoc,
  "fragment MirrorFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      stats {\n        ...StatsFields\n      }\n      createdAt\n    }\n  }\n  createdAt\n  appId\n}":
    types.MirrorFieldsFragmentDoc,
  "fragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n}":
    types.PostFieldsFragmentDoc,
  "fragment ProfileFields on Profile {\n  id\n  name\n  handle\n  bio\n  ownedBy\n  isFollowedByMe\n  stats {\n    totalFollowers\n    totalFollowing\n  }\n  attributes {\n    key\n    value\n  }\n  picture {\n    ... on MediaSet {\n      original {\n        url\n      }\n    }\n    ... on NftImage {\n      uri\n    }\n  }\n  followModule {\n    __typename\n  }\n}":
    types.ProfileFieldsFragmentDoc,
  "fragment RelayerResultFields on RelayResult {\n  ... on RelayerResult {\n    txHash\n    txId\n  }\n  ... on RelayError {\n    reason\n  }\n}":
    types.RelayerResultFieldsFragmentDoc,
  "fragment StatsFields on PublicationStats {\n  totalUpvotes\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}":
    types.StatsFieldsFragmentDoc,
  "mutation AddReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}":
    types.AddReactionDocument,
  "mutation Authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}":
    types.AuthenticateDocument,
  "mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}":
    types.BroadcastDocument,
  "mutation CreateBurnProfileTypedData($options: TypedDataOptions, $request: BurnProfileRequest!) {\n  createBurnProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}":
    types.CreateBurnProfileTypedDataDocument,
  "mutation CreateCollectTypedData($options: TypedDataOptions, $request: CreateCollectRequest!) {\n  createCollectTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}":
    types.CreateCollectTypedDataDocument,
  "mutation CreateCommentTypedData($options: TypedDataOptions, $request: CreatePublicCommentRequest!) {\n  createCommentTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}":
    types.CreateCommentTypedDataDocument,
  "mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreateCommentViaDispatcherDocument,
  "mutation CreateFollowTypedData($options: TypedDataOptions, $request: FollowRequest!) {\n  createFollowTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}":
    types.CreateFollowTypedDataDocument,
  "mutation CreateMirrorTypedData($options: TypedDataOptions, $request: CreateMirrorRequest!) {\n  createMirrorTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}":
    types.CreateMirrorTypedDataDocument,
  "mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreateMirrorViaDispatcherDocument,
  "mutation CreatePostTypedData($options: TypedDataOptions, $request: CreatePublicPostRequest!) {\n  createPostTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}":
    types.CreatePostTypedDataDocument,
  "mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreatePostViaDispatcherDocument,
  "mutation CreateProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreateProfileDocument,
  "mutation CreateSetDefaultProfileTypedData($options: TypedDataOptions, $request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}":
    types.CreateSetDefaultProfileTypedDataDocument,
  "mutation CreateSetDispatcherTypedData($options: TypedDataOptions, $request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}":
    types.CreateSetDispatcherTypedDataDocument,
  "mutation CreateSetFollowModuleTypedData($options: TypedDataOptions, $request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}":
    types.CreateSetFollowModuleTypedDataDocument,
  "mutation CreateSetProfileImageURITypedData($options: TypedDataOptions, $request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}":
    types.CreateSetProfileImageUriTypedDataDocument,
  "mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreateSetProfileImageUriViaDispatcherDocument,
  "mutation CreateSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}":
    types.CreateSetProfileMetadataTypedDataDocument,
  "mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}":
    types.CreateSetProfileMetadataViaDispatcherDocument,
  "mutation CreateUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}":
    types.CreateUnfollowTypedDataDocument,
  "mutation HidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}":
    types.HidePublicationDocument,
  "mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}":
    types.ProxyActionDocument,
  "mutation RemoveReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}":
    types.RemoveReactionDocument,
  "mutation ReportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}":
    types.ReportPublicationDocument,
  "query ApprovedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    allowance\n    contractAddress\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}":
    types.ApprovedModuleAllowanceAmountDocument,
  "query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}":
    types.ChallengeDocument,
  "query CollectModule($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    ... on Post {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Comment {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Mirror {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n  }\n}":
    types.CollectModuleDocument,
  "query Collectors($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      address\n      defaultProfile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.CollectorsDocument,
  "query CommentFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}":
    types.CommentFeedDocument,
  "query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}":
    types.DefaultProfileDocument,
  "query EnabledCurrencyModules {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}":
    types.EnabledCurrencyModulesDocument,
  "query EnabledCurrencyModulesWithProfile($request: SingleProfileQueryRequest!) {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n  profile(request: $request) {\n    followModule {\n      __typename\n    }\n  }\n}":
    types.EnabledCurrencyModulesWithProfileDocument,
  "query EnabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n    }\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}":
    types.EnabledModulesDocument,
  "query ExploreFeed($request: ExplorePublicationRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}":
    types.ExploreFeedDocument,
  "query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}":
    types.ExploreProfilesDocument,
  "query FeedHighlights($request: FeedHighlightsRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feedHighlights(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}":
    types.FeedHighlightsDocument,
  "query Followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        address\n        defaultProfile {\n          ...ProfileFields\n          isFollowedByMe\n        }\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.FollowersDocument,
  "query Following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.FollowingDocument,
  "query GenerateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}":
    types.GenerateModuleCurrencyApprovalDataDocument,
  "query HasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    ... on TransactionIndexedResult {\n      metadataStatus {\n        status\n      }\n      txHash\n      indexed\n    }\n    ... on TransactionError {\n      reason\n    }\n  }\n}":
    types.HasTxHashBeenIndexedDocument,
  'query LensterStats {\n  globalProtocolStats(request: {sources: "Lenster"}) {\n    totalProfiles\n    totalPosts\n    totalBurntProfiles\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n  }\n}':
    types.LensterStatsDocument,
  "query Likes($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.LikesDocument,
  "query Mirrors($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.MirrorsDocument,
  "query MutualFollowers($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      handle\n      name\n      picture {\n        ... on MediaSet {\n          original {\n            url\n          }\n        }\n        ... on NftImage {\n          uri\n        }\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}":
    types.MutualFollowersDocument,
  "query MutualFollowersList($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.MutualFollowersListDocument,
  "query NFTChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}":
    types.NftChallengeDocument,
  "query NFTFeed($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      name\n      collectionName\n      contractAddress\n      tokenId\n      chainId\n      originalContent {\n        uri\n        animatedUrl\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.NftFeedDocument,
  "query NotificationCount($request: NotificationRequest!) {\n  notifications(request: $request) {\n    pageInfo {\n      totalCount\n    }\n  }\n}":
    types.NotificationCountDocument,
  "query Notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        createdAt\n      }\n      ... on NewMentionNotification {\n        notificationId\n        mentionPublication {\n          ... on Post {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewReactionNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Mirror {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCommentNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        comment {\n          id\n          metadata {\n            content\n          }\n          commentOn {\n            ... on Post {\n              id\n            }\n            ... on Comment {\n              id\n            }\n            ... on Mirror {\n              id\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCollectNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        collectedPublication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n        }\n        createdAt\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}":
    types.NotificationsDocument,
  "query Profile($request: SingleProfileQueryRequest!, $who: ProfileId) {\n  profile(request: $request) {\n    id\n    handle\n    ownedBy\n    name\n    bio\n    metadata\n    followNftAddress\n    isFollowedByMe\n    isFollowing(who: $who)\n    attributes {\n      key\n      value\n    }\n    dispatcher {\n      canUseRelay\n    }\n    onChainIdentity {\n      proofOfHumanity\n      sybilDotOrg {\n        verified\n        source {\n          twitter {\n            handle\n          }\n        }\n      }\n      ens {\n        name\n      }\n      worldcoin {\n        isHuman\n      }\n    }\n    stats {\n      totalFollowers\n      totalFollowing\n      totalPosts\n      totalComments\n      totalMirrors\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n      }\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    followModule {\n      __typename\n    }\n  }\n}":
    types.ProfileDocument,
  "query ProfileAddress($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    ownedBy\n  }\n}":
    types.ProfileAddressDocument,
  "query ProfileFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}":
    types.ProfileFeedDocument,
  "query ProfileSettings($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    name\n    bio\n    attributes {\n      key\n      value\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n        tokenId\n        contractAddress\n      }\n    }\n  }\n}":
    types.ProfileSettingsDocument,
  "query Profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isDefault\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.ProfilesDocument,
  "query Publication($request: PublicationQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publication(request: $request) {\n    ... on Post {\n      ...PostFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n  }\n}":
    types.PublicationDocument,
  "query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    revenue {\n      total {\n        value\n      }\n    }\n  }\n}":
    types.PublicationRevenueDocument,
  "query RecommendedProfiles($options: RecommendedProfileOptions) {\n  recommendedProfiles(options: $options) {\n    ...ProfileFields\n    isFollowedByMe\n  }\n}":
    types.RecommendedProfilesDocument,
  "query RelevantPeople($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n  }\n}":
    types.RelevantPeopleDocument,
  "query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      items {\n        ...ProfileFields\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}":
    types.SearchProfilesDocument,
  "query SearchPublications($request: SearchQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      items {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}":
    types.SearchPublicationsDocument,
  "query SuperFollow($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    followModule {\n      ... on FeeFollowModuleSettings {\n        amount {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n        recipient\n      }\n    }\n  }\n}":
    types.SuperFollowDocument,
  "query Timeline($request: FeedRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feed(request: $request) {\n    items {\n      root {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          ...ProfileFields\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}":
    types.TimelineDocument,
  "query Trending($request: AllPublicationsTagsRequest!) {\n  allPublicationsTags(request: $request) {\n    items {\n      tag\n      total\n    }\n  }\n}":
    types.TrendingDocument,
  "query UserProfiles($ownedBy: [EthereumAddress!]) {\n  profiles(request: {ownedBy: $ownedBy}) {\n    items {\n      ...ProfileFields\n      stats {\n        totalFollowing\n      }\n      isDefault\n      dispatcher {\n        canUseRelay\n      }\n    }\n  }\n  userSigNonces {\n    lensHubOnChainSigNonce\n  }\n}":
    types.UserProfilesDocument,
};

export function graphql(
  source: "fragment CollectModuleFields on CollectModule {\n  ... on FreeCollectModuleSettings {\n    type\n    contractAddress\n    followerOnly\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}"
): typeof documents["fragment CollectModuleFields on CollectModule {\n  ... on FreeCollectModuleSettings {\n    type\n    contractAddress\n    followerOnly\n  }\n  ... on FeeCollectModuleSettings {\n    type\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedFeeCollectModuleSettings {\n    type\n    collectLimit\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on LimitedTimedFeeCollectModuleSettings {\n    type\n    collectLimit\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n  ... on TimedFeeCollectModuleSettings {\n    type\n    endTimestamp\n    referralFee\n    contractAddress\n    followerOnly\n    amount {\n      asset {\n        symbol\n        decimals\n        address\n      }\n      value\n    }\n  }\n}"];
export function graphql(
  source: "fragment CommentFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      hasCollectedByMe\n      collectedBy {\n        address\n        defaultProfile {\n          handle\n        }\n      }\n      collectModule {\n        ...CollectModuleFields\n      }\n      metadata {\n        ...MetadataFields\n      }\n      stats {\n        ...StatsFields\n      }\n      mainPost {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      hidden\n      createdAt\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}"
): typeof documents["fragment CommentFields on Comment {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n  commentOn {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      hasCollectedByMe\n      collectedBy {\n        address\n        defaultProfile {\n          handle\n        }\n      }\n      collectModule {\n        ...CollectModuleFields\n      }\n      metadata {\n        ...MetadataFields\n      }\n      stats {\n        ...StatsFields\n      }\n      mainPost {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Mirror {\n          ...MirrorFields\n        }\n      }\n      hidden\n      createdAt\n    }\n    ... on Mirror {\n      ...MirrorFields\n    }\n  }\n}"];
export function graphql(
  source: "fragment MetadataFields on MetadataOutput {\n  name\n  description\n  content\n  image\n  attributes {\n    traitType\n    value\n  }\n  cover {\n    original {\n      url\n    }\n  }\n  media {\n    original {\n      url\n      mimeType\n    }\n  }\n}"
): typeof documents["fragment MetadataFields on MetadataOutput {\n  name\n  description\n  content\n  image\n  attributes {\n    traitType\n    value\n  }\n  cover {\n    original {\n      url\n    }\n  }\n  media {\n    original {\n      url\n      mimeType\n    }\n  }\n}"];
export function graphql(
  source: "fragment MirrorFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      stats {\n        ...StatsFields\n      }\n      createdAt\n    }\n  }\n  createdAt\n  appId\n}"
): typeof documents["fragment MirrorFields on Mirror {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  mirrorOf {\n    ... on Post {\n      ...PostFields\n    }\n    ... on Comment {\n      id\n      profile {\n        ...ProfileFields\n      }\n      reaction(request: $reactionRequest)\n      mirrors(by: $profileId)\n      canComment(profileId: $profileId) {\n        result\n      }\n      canMirror(profileId: $profileId) {\n        result\n      }\n      stats {\n        ...StatsFields\n      }\n      createdAt\n    }\n  }\n  createdAt\n  appId\n}"];
export function graphql(
  source: "fragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n}"
): typeof documents["fragment PostFields on Post {\n  id\n  profile {\n    ...ProfileFields\n  }\n  reaction(request: $reactionRequest)\n  mirrors(by: $profileId)\n  canComment(profileId: $profileId) {\n    result\n  }\n  canMirror(profileId: $profileId) {\n    result\n  }\n  hasCollectedByMe\n  collectedBy {\n    address\n    defaultProfile {\n      ...ProfileFields\n    }\n  }\n  collectModule {\n    ...CollectModuleFields\n  }\n  stats {\n    ...StatsFields\n  }\n  metadata {\n    ...MetadataFields\n  }\n  hidden\n  createdAt\n  appId\n}"];
export function graphql(
  source: "fragment ProfileFields on Profile {\n  id\n  name\n  handle\n  bio\n  ownedBy\n  isFollowedByMe\n  stats {\n    totalFollowers\n    totalFollowing\n  }\n  attributes {\n    key\n    value\n  }\n  picture {\n    ... on MediaSet {\n      original {\n        url\n      }\n    }\n    ... on NftImage {\n      uri\n    }\n  }\n  followModule {\n    __typename\n  }\n}"
): typeof documents["fragment ProfileFields on Profile {\n  id\n  name\n  handle\n  bio\n  ownedBy\n  isFollowedByMe\n  stats {\n    totalFollowers\n    totalFollowing\n  }\n  attributes {\n    key\n    value\n  }\n  picture {\n    ... on MediaSet {\n      original {\n        url\n      }\n    }\n    ... on NftImage {\n      uri\n    }\n  }\n  followModule {\n    __typename\n  }\n}"];
export function graphql(
  source: "fragment RelayerResultFields on RelayResult {\n  ... on RelayerResult {\n    txHash\n    txId\n  }\n  ... on RelayError {\n    reason\n  }\n}"
): typeof documents["fragment RelayerResultFields on RelayResult {\n  ... on RelayerResult {\n    txHash\n    txId\n  }\n  ... on RelayError {\n    reason\n  }\n}"];
export function graphql(
  source: "fragment StatsFields on PublicationStats {\n  totalUpvotes\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}"
): typeof documents["fragment StatsFields on PublicationStats {\n  totalUpvotes\n  totalAmountOfMirrors\n  totalAmountOfCollects\n  totalAmountOfComments\n}"];
export function graphql(
  source: "mutation AddReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}"
): typeof documents["mutation AddReaction($request: ReactionRequest!) {\n  addReaction(request: $request)\n}"];
export function graphql(
  source: "mutation Authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"
): typeof documents["mutation Authenticate($request: SignedAuthChallenge!) {\n  authenticate(request: $request) {\n    accessToken\n    refreshToken\n  }\n}"];
export function graphql(
  source: "mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"
): typeof documents["mutation Broadcast($request: BroadcastRequest!) {\n  broadcast(request: $request) {\n    ... on RelayerResult {\n      txHash\n      txId\n    }\n    ... on RelayError {\n      reason\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateBurnProfileTypedData($options: TypedDataOptions, $request: BurnProfileRequest!) {\n  createBurnProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateBurnProfileTypedData($options: TypedDataOptions, $request: BurnProfileRequest!) {\n  createBurnProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateCollectTypedData($options: TypedDataOptions, $request: CreateCollectRequest!) {\n  createCollectTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateCollectTypedData($options: TypedDataOptions, $request: CreateCollectRequest!) {\n  createCollectTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CollectWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        pubId\n        data\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateCommentTypedData($options: TypedDataOptions, $request: CreatePublicCommentRequest!) {\n  createCommentTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateCommentTypedData($options: TypedDataOptions, $request: CreatePublicCommentRequest!) {\n  createCommentTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        CommentWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {\n  createCommentViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreateFollowTypedData($options: TypedDataOptions, $request: FollowRequest!) {\n  createFollowTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateFollowTypedData($options: TypedDataOptions, $request: FollowRequest!) {\n  createFollowTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        FollowWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        profileIds\n        datas\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateMirrorTypedData($options: TypedDataOptions, $request: CreateMirrorRequest!) {\n  createMirrorTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateMirrorTypedData($options: TypedDataOptions, $request: CreateMirrorRequest!) {\n  createMirrorTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        MirrorWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        profileIdPointed\n        pubIdPointed\n        referenceModule\n        referenceModuleData\n        referenceModuleInitData\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreateMirrorViaDispatcher($request: CreateMirrorRequest!) {\n  createMirrorViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreatePostTypedData($options: TypedDataOptions, $request: CreatePublicPostRequest!) {\n  createPostTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"
): typeof documents["mutation CreatePostTypedData($options: TypedDataOptions, $request: CreatePublicPostRequest!) {\n  createPostTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        PostWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        contentURI\n        collectModule\n        collectModuleInitData\n        referenceModule\n        referenceModuleInitData\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {\n  createPostViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreateProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreateProfile($request: CreateProfileRequest!) {\n  createProfile(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreateSetDefaultProfileTypedData($options: TypedDataOptions, $request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateSetDefaultProfileTypedData($options: TypedDataOptions, $request: CreateSetDefaultProfileRequest!) {\n  createSetDefaultProfileTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetDefaultProfileWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        wallet\n        profileId\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateSetDispatcherTypedData($options: TypedDataOptions, $request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateSetDispatcherTypedData($options: TypedDataOptions, $request: SetDispatcherRequest!) {\n  createSetDispatcherTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetDispatcherWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        dispatcher\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateSetFollowModuleTypedData($options: TypedDataOptions, $request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateSetFollowModuleTypedData($options: TypedDataOptions, $request: CreateSetFollowModuleRequest!) {\n  createSetFollowModuleTypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetFollowModuleWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        followModule\n        followModuleInitData\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateSetProfileImageURITypedData($options: TypedDataOptions, $request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateSetProfileImageURITypedData($options: TypedDataOptions, $request: UpdateProfileImageRequest!) {\n  createSetProfileImageURITypedData(options: $options, request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        SetProfileImageURIWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        imageURI\n        profileId\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreateSetProfileImageURIViaDispatcher($request: UpdateProfileImageRequest!) {\n  createSetProfileImageURIViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreateSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateSetProfileMetadataTypedData($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      types {\n        SetProfileMetadataURIWithSig {\n          name\n          type\n        }\n      }\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      value {\n        nonce\n        deadline\n        profileId\n        metadata\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"
): typeof documents["mutation CreateSetProfileMetadataViaDispatcher($request: CreatePublicSetProfileMetadataURIRequest!) {\n  createSetProfileMetadataViaDispatcher(request: $request) {\n    ...RelayerResultFields\n  }\n}"];
export function graphql(
  source: "mutation CreateUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"
): typeof documents["mutation CreateUnfollowTypedData($request: UnfollowRequest!) {\n  createUnfollowTypedData(request: $request) {\n    id\n    expiresAt\n    typedData {\n      domain {\n        name\n        chainId\n        version\n        verifyingContract\n      }\n      types {\n        BurnWithSig {\n          name\n          type\n        }\n      }\n      value {\n        nonce\n        deadline\n        tokenId\n      }\n    }\n  }\n}"];
export function graphql(
  source: "mutation HidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}"
): typeof documents["mutation HidePublication($request: HidePublicationRequest!) {\n  hidePublication(request: $request)\n}"];
export function graphql(
  source: "mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}"
): typeof documents["mutation ProxyAction($request: ProxyActionRequest!) {\n  proxyAction(request: $request)\n}"];
export function graphql(
  source: "mutation RemoveReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}"
): typeof documents["mutation RemoveReaction($request: ReactionRequest!) {\n  removeReaction(request: $request)\n}"];
export function graphql(
  source: "mutation ReportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}"
): typeof documents["mutation ReportPublication($request: ReportPublicationRequest!) {\n  reportPublication(request: $request)\n}"];
export function graphql(
  source: "query ApprovedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    allowance\n    contractAddress\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"
): typeof documents["query ApprovedModuleAllowanceAmount($request: ApprovedModuleAllowanceAmountRequest!) {\n  approvedModuleAllowanceAmount(request: $request) {\n    currency\n    module\n    allowance\n    contractAddress\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"];
export function graphql(
  source: "query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}"
): typeof documents["query Challenge($request: ChallengeRequest!) {\n  challenge(request: $request) {\n    text\n  }\n}"];
export function graphql(
  source: "query CollectModule($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    ... on Post {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Comment {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Mirror {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n  }\n}"
): typeof documents["query CollectModule($request: PublicationQueryRequest!) {\n  publication(request: $request) {\n    ... on Post {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Comment {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n    ... on Mirror {\n      collectNftAddress\n      collectModule {\n        ...CollectModuleFields\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query Collectors($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      address\n      defaultProfile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Collectors($request: WhoCollectedPublicationRequest!) {\n  whoCollectedPublication(request: $request) {\n    items {\n      address\n      defaultProfile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query CommentFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"
): typeof documents["query CommentFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Comment {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"];
export function graphql(
  source: "query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}"
): typeof documents["query defaultProfile($request: DefaultProfileRequest!) {\n  defaultProfile(request: $request) {\n    ...ProfileFields\n  }\n}"];
export function graphql(
  source: "query EnabledCurrencyModules {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"
): typeof documents["query EnabledCurrencyModules {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"];
export function graphql(
  source: "query EnabledCurrencyModulesWithProfile($request: SingleProfileQueryRequest!) {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n  profile(request: $request) {\n    followModule {\n      __typename\n    }\n  }\n}"
): typeof documents["query EnabledCurrencyModulesWithProfile($request: SingleProfileQueryRequest!) {\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n  profile(request: $request) {\n    followModule {\n      __typename\n    }\n  }\n}"];
export function graphql(
  source: "query EnabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n    }\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"
): typeof documents["query EnabledModules {\n  enabledModules {\n    collectModules {\n      moduleName\n      contractAddress\n    }\n  }\n  enabledModuleCurrencies {\n    name\n    symbol\n    decimals\n    address\n  }\n}"];
export function graphql(
  source: "query ExploreFeed($request: ExplorePublicationRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"
): typeof documents["query ExploreFeed($request: ExplorePublicationRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  explorePublications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"];
export function graphql(
  source: "query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query exploreProfiles($request: ExploreProfilesRequest!) {\n  exploreProfiles(request: $request) {\n    items {\n      ...ProfileFields\n    }\n    pageInfo {\n      prev\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query FeedHighlights($request: FeedHighlightsRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feedHighlights(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"
): typeof documents["query FeedHighlights($request: FeedHighlightsRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feedHighlights(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"];
export function graphql(
  source: "query Followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        address\n        defaultProfile {\n          ...ProfileFields\n          isFollowedByMe\n        }\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Followers($request: FollowersRequest!) {\n  followers(request: $request) {\n    items {\n      wallet {\n        address\n        defaultProfile {\n          ...ProfileFields\n          isFollowedByMe\n        }\n      }\n      totalAmountOfTimesFollowed\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query Following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Following($request: FollowingRequest!) {\n  following(request: $request) {\n    items {\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n      totalAmountOfTimesFollowing\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query GenerateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}"
): typeof documents["query GenerateModuleCurrencyApprovalData($request: GenerateModuleCurrencyApprovalDataRequest!) {\n  generateModuleCurrencyApprovalData(request: $request) {\n    to\n    from\n    data\n  }\n}"];
export function graphql(
  source: "query HasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    ... on TransactionIndexedResult {\n      metadataStatus {\n        status\n      }\n      txHash\n      indexed\n    }\n    ... on TransactionError {\n      reason\n    }\n  }\n}"
): typeof documents["query HasTxHashBeenIndexed($request: HasTxHashBeenIndexedRequest!) {\n  hasTxHashBeenIndexed(request: $request) {\n    ... on TransactionIndexedResult {\n      metadataStatus {\n        status\n      }\n      txHash\n      indexed\n    }\n    ... on TransactionError {\n      reason\n    }\n  }\n}"];
export function graphql(
  source: 'query LensterStats {\n  globalProtocolStats(request: {sources: "Lenster"}) {\n    totalProfiles\n    totalPosts\n    totalBurntProfiles\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n  }\n}'
): typeof documents['query LensterStats {\n  globalProtocolStats(request: {sources: "Lenster"}) {\n    totalProfiles\n    totalPosts\n    totalBurntProfiles\n    totalMirrors\n    totalComments\n    totalCollects\n    totalFollows\n  }\n}'];
export function graphql(
  source: "query Likes($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Likes($request: WhoReactedPublicationRequest!) {\n  whoReactedPublication(request: $request) {\n    items {\n      reactionId\n      profile {\n        ...ProfileFields\n        isFollowedByMe\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query Mirrors($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Mirrors($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query MutualFollowers($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      handle\n      name\n      picture {\n        ... on MediaSet {\n          original {\n            url\n          }\n        }\n        ... on NftImage {\n          uri\n        }\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}"
): typeof documents["query MutualFollowers($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      handle\n      name\n      picture {\n        ... on MediaSet {\n          original {\n            url\n          }\n        }\n        ... on NftImage {\n          uri\n        }\n      }\n    }\n    pageInfo {\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query MutualFollowersList($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query MutualFollowersList($request: MutualFollowersProfilesQueryRequest!) {\n  mutualFollowersProfiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query NFTChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}"
): typeof documents["query NFTChallenge($request: NftOwnershipChallengeRequest!) {\n  nftOwnershipChallenge(request: $request) {\n    id\n    text\n  }\n}"];
export function graphql(
  source: "query NFTFeed($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      name\n      collectionName\n      contractAddress\n      tokenId\n      chainId\n      originalContent {\n        uri\n        animatedUrl\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query NFTFeed($request: NFTsRequest!) {\n  nfts(request: $request) {\n    items {\n      name\n      collectionName\n      contractAddress\n      tokenId\n      chainId\n      originalContent {\n        uri\n        animatedUrl\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query NotificationCount($request: NotificationRequest!) {\n  notifications(request: $request) {\n    pageInfo {\n      totalCount\n    }\n  }\n}"
): typeof documents["query NotificationCount($request: NotificationRequest!) {\n  notifications(request: $request) {\n    pageInfo {\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query Notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        createdAt\n      }\n      ... on NewMentionNotification {\n        notificationId\n        mentionPublication {\n          ... on Post {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewReactionNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Mirror {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCommentNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        comment {\n          id\n          metadata {\n            content\n          }\n          commentOn {\n            ... on Post {\n              id\n            }\n            ... on Comment {\n              id\n            }\n            ... on Mirror {\n              id\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCollectNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        collectedPublication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n        }\n        createdAt\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"
): typeof documents["query Notifications($request: NotificationRequest!) {\n  notifications(request: $request) {\n    items {\n      ... on NewFollowerNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        createdAt\n      }\n      ... on NewMentionNotification {\n        notificationId\n        mentionPublication {\n          ... on Post {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            profile {\n              ...ProfileFields\n            }\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewReactionNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Mirror {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCommentNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        comment {\n          id\n          metadata {\n            content\n          }\n          commentOn {\n            ... on Post {\n              id\n            }\n            ... on Comment {\n              id\n            }\n            ... on Mirror {\n              id\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewMirrorNotification {\n        notificationId\n        profile {\n          ...ProfileFields\n        }\n        publication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n          }\n        }\n        createdAt\n      }\n      ... on NewCollectNotification {\n        notificationId\n        wallet {\n          address\n          defaultProfile {\n            ...ProfileFields\n          }\n        }\n        collectedPublication {\n          ... on Post {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n          ... on Comment {\n            id\n            metadata {\n              content\n            }\n            collectModule {\n              ...CollectModuleFields\n            }\n          }\n        }\n        createdAt\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"];
export function graphql(
  source: "query Profile($request: SingleProfileQueryRequest!, $who: ProfileId) {\n  profile(request: $request) {\n    id\n    handle\n    ownedBy\n    name\n    bio\n    metadata\n    followNftAddress\n    isFollowedByMe\n    isFollowing(who: $who)\n    attributes {\n      key\n      value\n    }\n    dispatcher {\n      canUseRelay\n    }\n    onChainIdentity {\n      proofOfHumanity\n      sybilDotOrg {\n        verified\n        source {\n          twitter {\n            handle\n          }\n        }\n      }\n      ens {\n        name\n      }\n      worldcoin {\n        isHuman\n      }\n    }\n    stats {\n      totalFollowers\n      totalFollowing\n      totalPosts\n      totalComments\n      totalMirrors\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n      }\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    followModule {\n      __typename\n    }\n  }\n}"
): typeof documents["query Profile($request: SingleProfileQueryRequest!, $who: ProfileId) {\n  profile(request: $request) {\n    id\n    handle\n    ownedBy\n    name\n    bio\n    metadata\n    followNftAddress\n    isFollowedByMe\n    isFollowing(who: $who)\n    attributes {\n      key\n      value\n    }\n    dispatcher {\n      canUseRelay\n    }\n    onChainIdentity {\n      proofOfHumanity\n      sybilDotOrg {\n        verified\n        source {\n          twitter {\n            handle\n          }\n        }\n      }\n      ens {\n        name\n      }\n      worldcoin {\n        isHuman\n      }\n    }\n    stats {\n      totalFollowers\n      totalFollowing\n      totalPosts\n      totalComments\n      totalMirrors\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n      }\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    followModule {\n      __typename\n    }\n  }\n}"];
export function graphql(
  source: "query ProfileAddress($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    ownedBy\n  }\n}"
): typeof documents["query ProfileAddress($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    ownedBy\n  }\n}"];
export function graphql(
  source: "query ProfileFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"
): typeof documents["query ProfileFeed($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publications(request: $request) {\n    items {\n      ... on Post {\n        ...PostFields\n      }\n      ... on Comment {\n        ...CommentFields\n      }\n      ... on Mirror {\n        ...MirrorFields\n      }\n    }\n    pageInfo {\n      totalCount\n      next\n    }\n  }\n}"];
export function graphql(
  source: "query ProfileSettings($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    name\n    bio\n    attributes {\n      key\n      value\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n        tokenId\n        contractAddress\n      }\n    }\n  }\n}"
): typeof documents["query ProfileSettings($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    name\n    bio\n    attributes {\n      key\n      value\n    }\n    coverPicture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n    }\n    picture {\n      ... on MediaSet {\n        original {\n          url\n        }\n      }\n      ... on NftImage {\n        uri\n        tokenId\n        contractAddress\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query Profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isDefault\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Profiles($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isDefault\n      isFollowedByMe\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query Publication($request: PublicationQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publication(request: $request) {\n    ... on Post {\n      ...PostFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n  }\n}"
): typeof documents["query Publication($request: PublicationQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  publication(request: $request) {\n    ... on Post {\n      ...PostFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Comment {\n      ...CommentFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n    ... on Mirror {\n      ...MirrorFields\n      onChainContentURI\n      collectNftAddress\n      profile {\n        isFollowedByMe\n      }\n      referenceModule {\n        __typename\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    revenue {\n      total {\n        value\n      }\n    }\n  }\n}"
): typeof documents["query PublicationRevenue($request: PublicationRevenueQueryRequest!) {\n  publicationRevenue(request: $request) {\n    revenue {\n      total {\n        value\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query RecommendedProfiles($options: RecommendedProfileOptions) {\n  recommendedProfiles(options: $options) {\n    ...ProfileFields\n    isFollowedByMe\n  }\n}"
): typeof documents["query RecommendedProfiles($options: RecommendedProfileOptions) {\n  recommendedProfiles(options: $options) {\n    ...ProfileFields\n    isFollowedByMe\n  }\n}"];
export function graphql(
  source: "query RelevantPeople($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n  }\n}"
): typeof documents["query RelevantPeople($request: ProfileQueryRequest!) {\n  profiles(request: $request) {\n    items {\n      ...ProfileFields\n      isFollowedByMe\n    }\n  }\n}"];
export function graphql(
  source: "query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      items {\n        ...ProfileFields\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}"
): typeof documents["query SearchProfiles($request: SearchQueryRequest!) {\n  search(request: $request) {\n    ... on ProfileSearchResult {\n      items {\n        ...ProfileFields\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query SearchPublications($request: SearchQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      items {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}"
): typeof documents["query SearchPublications($request: SearchQueryRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  search(request: $request) {\n    ... on PublicationSearchResult {\n      items {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      pageInfo {\n        next\n        totalCount\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query SuperFollow($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    followModule {\n      ... on FeeFollowModuleSettings {\n        amount {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n        recipient\n      }\n    }\n  }\n}"
): typeof documents["query SuperFollow($request: SingleProfileQueryRequest!) {\n  profile(request: $request) {\n    id\n    followModule {\n      ... on FeeFollowModuleSettings {\n        amount {\n          asset {\n            name\n            symbol\n            decimals\n            address\n          }\n          value\n        }\n        recipient\n      }\n    }\n  }\n}"];
export function graphql(
  source: "query Timeline($request: FeedRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feed(request: $request) {\n    items {\n      root {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          ...ProfileFields\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"
): typeof documents["query Timeline($request: FeedRequest!, $reactionRequest: ReactionFieldResolverRequest, $profileId: ProfileId) {\n  feed(request: $request) {\n    items {\n      root {\n        ... on Post {\n          ...PostFields\n        }\n        ... on Comment {\n          ...CommentFields\n        }\n      }\n      electedMirror {\n        mirrorId\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      mirrors {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      collects {\n        profile {\n          ...ProfileFields\n        }\n        timestamp\n      }\n      reactions {\n        profile {\n          ...ProfileFields\n        }\n        reaction\n        timestamp\n      }\n      comments {\n        ...CommentFields\n      }\n    }\n    pageInfo {\n      next\n      totalCount\n    }\n  }\n}"];
export function graphql(
  source: "query Trending($request: AllPublicationsTagsRequest!) {\n  allPublicationsTags(request: $request) {\n    items {\n      tag\n      total\n    }\n  }\n}"
): typeof documents["query Trending($request: AllPublicationsTagsRequest!) {\n  allPublicationsTags(request: $request) {\n    items {\n      tag\n      total\n    }\n  }\n}"];
export function graphql(
  source: "query UserProfiles($ownedBy: [EthereumAddress!]) {\n  profiles(request: {ownedBy: $ownedBy}) {\n    items {\n      ...ProfileFields\n      stats {\n        totalFollowing\n      }\n      isDefault\n      dispatcher {\n        canUseRelay\n      }\n    }\n  }\n  userSigNonces {\n    lensHubOnChainSigNonce\n  }\n}"
): typeof documents["query UserProfiles($ownedBy: [EthereumAddress!]) {\n  profiles(request: {ownedBy: $ownedBy}) {\n    items {\n      ...ProfileFields\n      stats {\n        totalFollowing\n      }\n      isDefault\n      dispatcher {\n        canUseRelay\n      }\n    }\n  }\n  userSigNonces {\n    lensHubOnChainSigNonce\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
